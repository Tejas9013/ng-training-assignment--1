# Angular Task Form and Supporting Components

## 1. Task Form Component (src/app/components/task-form/task-form.component.ts)

```typescript
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { TaskService } from '@app/services/task.service';
import { ErrorService } from '@app/services/error.service';
import { TaskModel } from '@app/models/task.model';
import { Task, TaskStatus, TaskPriority } from '@app/interfaces/task.interface';

@Component({
  selector: 'app-task-form',
  templateUrl: './task-form.component.html',
  styleUrls: ['./task-form.component.scss']
})
export class TaskFormComponent implements OnInit {
  taskForm: FormGroup;
  isEditMode = false;
  taskId: string | null = null;
  submitting = false;
  loading = false;

  // Form options
  statusOptions: { value: TaskStatus; label: string }[] = [
    { value: 'pending', label: 'Pending' },
    { value: 'completed', label: 'Completed' }
  ];

  priorityOptions: { value: TaskPriority; label: string }[] = [
    { value: 'low', label: 'Low' },
    { value: 'normal', label: 'Normal' },
    { value: 'high', label: 'High' }
  ];

  constructor(
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private router: Router,
    private taskService: TaskService,
    private errorService: ErrorService
  ) {
    this.taskForm = this.createForm();
  }

  ngOnInit(): void {
    this.route.paramMap.subscribe(params => {
      this.taskId = params.get('id');
      this.isEditMode = !!this.taskId;
      
      if (this.isEditMode) {
        this.loadTask();
      }
    });
  }

  /**
   * Create reactive form
   */
  private createForm(): FormGroup {
    return this.fb.group({
      title: ['', [
        Validators.required,
        Validators.maxLength(100)
      ]],
      description: ['', [
        Validators.maxLength(500)
      ]],
      status: ['pending', Validators.required],
      priority: ['normal', Validators.required],
      dueDate: [''],
      assignedTo: ['', [
        Validators.maxLength(50)
      ]],
      comments: ['', [
        Validators.maxLength(1000)
      ]]
    });
  }

  /**
   * Load task for editing
   */
  private loadTask(): void {
    if (!this.taskId) return;
    
    this.loading = true;
    this.taskService.getTaskById(this.taskId).subscribe({
      next: (task) => {
        this.populateForm(task);
        this.loading = false;
      },
      error: (error) => {
        this.errorService.addError('Failed to load task');
        this.router.navigate(['/tasks']);
        this.loading = false;
      }
    });
  }

  /**
   * Populate form with task data
   */
  private populateForm(task: TaskModel): void {
    this.taskForm.patchValue({
      title: task.title,
      description: task.description,
      status: task.status,
      priority: task.priority,
      dueDate: task.dueDate ? this.formatDateForInput(task.dueDate) : '',
      assignedTo: task.assignedTo,
      comments: task.comments
    });
  }

  /**
   * Format date for HTML input
   */
  private formatDateForInput(date: Date): string {
    const d = new Date(date);
    return d.toISOString().split('T')[0];
  }

  /**
   * Check if form field has error
   */
  hasError(fieldName: string, errorType?: string): boolean {
    const field = this.taskForm.get(fieldName);
    if (!field) return false;
    
    if (errorType) {
      return field.hasError(errorType) && (field.dirty || field.touched);
    }
    
    return field.invalid && (field.dirty || field.touched);
  }

  /**
   * Get error message for field
   */
  getErrorMessage(fieldName: string): string {
    const field = this.taskForm.get(fieldName);
    if (!field || !field.errors) return '';

    const errors = field.errors;
    
    if (errors['required']) {
      return `${this.getFieldLabel(fieldName)} is required`;
    }
    
    if (errors['maxlength']) {
      return `${this.getFieldLabel(fieldName)} cannot exceed ${errors['maxlength'].requiredLength} characters`;
    }
    
    return 'Invalid input';
  }

  /**
   * Get field label for error messages
   */
  private getFieldLabel(fieldName: string): string {
    const labels: { [key: string]: string } = {
      title: 'Title',
      description: 'Description',
      status: 'Status',
      priority: 'Priority',
      dueDate: 'Due Date',
      assignedTo: 'Assigned To',
      comments: 'Comments'
    };
    
    return labels[fieldName] || fieldName;
  }

  /**
   * Submit form
   */
  onSubmit(): void {
    if (this.taskForm.invalid) {
      this.markFormGroupTouched();
      return;
    }

    this.submitting = true;
    const formValue = this.taskForm.value;
    
    // Convert dueDate string to Date object if provided
    const taskData: Task = {
      ...formValue,
      dueDate: formValue.dueDate ? new Date(formValue.dueDate) : undefined
    };

    const operation = this.isEditMode 
      ? this.taskService.updateTask(this.taskId!, taskData)
      : this.taskService.createTask(taskData);

    operation.subscribe({
      next: (task) => {
        const message = this.isEditMode 
          ? 'Task updated successfully' 
          : 'Task created successfully';
        
        this.errorService.addSuccess(message);
        this.router.navigate(['/tasks']);
        this.submitting = false;
      },
      error: (error) => {
        const message = this.isEditMode 
          ? 'Failed to update task' 
          : 'Failed to create task';
        
        this.errorService.addError(message);
        this.submitting = false;
      }
    });
  }

  /**
   * Mark all form fields as touched to trigger validation
   */
  private markFormGroupTouched(): void {
    Object.keys(this.taskForm.controls).forEach(key => {
      const control = this.taskForm.get(key);
      control?.markAsTouched();
    });
  }

  /**
   * Cancel and navigate back to task list
   */
  onCancel(): void {
    if (this.taskForm.dirty) {
      if (confirm('You have unsaved changes. Are you sure you want to cancel?')) {
        this.router.navigate(['/tasks']);
      }
    } else {
      this.router.navigate(['/tasks']);
    }
  }

  /**
   * Reset form to initial state
   */
  onReset(): void {
    if (confirm('Are you sure you want to reset the form?')) {
      if (this.isEditMode) {
        this.loadTask();
      } else {
        this.taskForm.reset({
          status: 'pending',
          priority: 'normal'
        });
      }
    }
  }
}
```

## 2. Task Form Component Template (src/app/components/task-form/task-form.component.html)

```html
<div class="slds-card task-form">
  <div class="slds-card__header slds-grid">
    <header class="slds-media slds-media_center slds-has-flexi-truncate">
      <div class="slds-media__figure">
        <span class="slds-icon_container slds-icon-standard-task">
          <svg class="slds-icon slds-icon_small" aria-hidden="true">
            <use xlink:href="/assets/icons/standard-sprite/svg/symbols.svg#task"></use>
          </svg>
        </span>
      </div>
      <div class="slds-media__body">
        <h2 class="slds-card__header-title">
          <span>{{ isEditMode ? 'Edit Task' : 'Create New Task' }}</span>
        </h2>
      </div>
    </header>
  </div>

  <div class="slds-card__body slds-card__body_inner" *ngIf="!loading">
    <form [formGroup]="taskForm" (ngSubmit)="onSubmit()" novalidate>
      <div class="slds-grid slds-wrap slds-gutters_small">
        
        <!-- Title Field -->
        <div class="slds-col slds-size_1-of-1 slds-large-size_1-of-2">
          <div class="slds-form-element" 
               [class.slds-has-error]="hasError('title')">
            <label class="slds-form-element__label" for="title">
              <abbr class="slds-required" title="required">*</abbr>
              Title
            </label>
            <div class="slds-form-element__control">
              <input 
                type="text" 
                id="title"
                class="slds-input"
                formControlName="title"
                placeholder="Enter task title"
                maxlength="100">
            </div>
            <div class="slds-form-element__help" *ngIf="hasError('title')">
              {{ getErrorMessage('title') }}
            </div>
          </div>
        </div>

        <!-- Assigned To Field -->
        <div class="slds-col slds-size_1-of-1 slds-large-size_1-of-2">
          <div class="slds-form-element" 
               [class.slds-has-error]="hasError('assignedTo')">
            <label class="slds-form-element__label" for="assignedTo">
              Assigned To
            </label>
            <div class="slds-form-element__control">
              <input 
                type="text" 
                id="assignedTo"
                class="slds-input"
                formControlName="assignedTo"
                placeholder="Enter assignee name"
                maxlength="50">
            </div>
            <div class="slds-form-element__help" *ngIf="hasError('assignedTo')">
              {{ getErrorMessage('assignedTo') }}
            </div>
          </div>
        </div>

        <!-- Description Field -->
        <div class="slds-col slds-size_1-of-1">
          <div class="slds-form-element" 
               [class.slds-has-error]="hasError('description')">
            <label class="slds-form-element__label" for="description">
              Description
            </label>
            <div class="slds-form-element__control">
              <textarea 
                id="description"
                class="slds-textarea"
                formControlName="description"
                placeholder="Enter task description"
                rows="3"
                maxlength="500">
              </textarea>
            </div>
            <div class="slds-form-element__help" *ngIf="hasError('description')">
              {{ getErrorMessage('description') }}
            </div>
          </div>
        </div>

        <!-- Status Field -->
        <div class="slds-col slds-size_1-of-1 slds-medium-size_1-of-3">
          <div class="slds-form-element">
            <label class="slds-form-element__label" for="status">
              <abbr class="slds-required" title="required">*</abbr>
              Status
            </label>
            <div class="slds-form-element__control">
              <div class="slds-select_container">
                <select 
                  id="status"
                  class="slds-select"
                  formControlName="status">
                  <option 
                    *ngFor="let option of statusOptions" 
                    [value]="option.value">
                    {{ option.label }}
                  </option>
                </select>
              </div>
            </div>
          </div>
        </div>

        <!-- Priority Field -->
        <div class="slds-col slds-size_1-of-1 slds-medium-size_1-of-3">
          <div class="slds-form-element">
            <label class="slds-form-element__label" for="priority">
              <abbr class="slds-required" title="required">*</abbr>
              Priority
            </label>
            <div class="slds-form-element__control">
              <div class="slds-select_container">
                <select 
                  id="priority"
                  class="slds-select"
                  formControlName="priority">
                  <option 
                    *ngFor="let option of priorityOptions" 
                    [value]="option.value">
                    {{ option.label }}
                  </option>
                </select>
              </div>
            </div>
          </div>
        </div>

        <!-- Due Date Field -->
        <div class="slds-col slds-size_1-of-1 slds-medium-size_1-of-3">
          <div class="slds-form-element" 
               [class.slds-has-error]="hasError('dueDate')">
            <label class="slds-form-element__label" for="dueDate">
              Due Date
            </label>
            <div class="slds-form-element__control">
              <input 
                type="date" 
                id="dueDate"
                class="slds-input"
                formControlName="dueDate">
            </div>
            <div class="slds-form-element__help" *ngIf="hasError('dueDate')">
              {{ getErrorMessage('dueDate') }}
            </div>
          </div>
        </div>

        <!-- Comments Field -->
        <div class="slds-col slds-size_1-of-1">
          <div class="slds-form-element" 
               [class.slds-has-error]="hasError('comments')">
            <label class="slds-form-element__label" for="comments">
              Comments
            </label>
            <div class="slds-form-element__control">
              <textarea 
                id="comments"
                class="slds-textarea"
                formControlName="comments"
                placeholder="Enter additional comments"
                rows="3"
                maxlength="1000">
              </textarea>
            </div>
            <div class="slds-form-element__help" *ngIf="hasError('comments')">
              {{ getErrorMessage('comments') }}
            </div>
          </div>
        </div>
      </div>
    </form>
  </div>

  <!-- Loading State -->
  <div class="slds-card__body slds-card__body_inner" *ngIf="loading">
    <div class="loading">
      <div class="loading-spinner"></div>
      <p class="slds-text-heading_small slds-m-top_medium">Loading task...</p>
    </div>
  </div>

  <!-- Form Actions -->
  <div class="slds-card__footer" *ngIf="!loading">
    <div class="slds-grid slds-grid_align-spread">
      <div class="slds-col">
        <button 
          type="button"
          class="slds-button slds-button_neutral"
          (click)="onReset()"
          [disabled]="submitting">
          Reset
        </button>
      </div>
      <div class="slds-col slds-no-flex">
        <div class="slds-button-group" role="group">
          <button 
            type="button"
            class="slds-button slds-button_neutral"
            (click)="onCancel()"
            [disabled]="submitting">
            Cancel
          </button>
          <button 
            type="submit"
            class="slds-button slds-button_brand"
            [disabled]="taskForm.invalid || submitting"
            (click)="onSubmit()">
            <span *ngIf="submitting">
              <svg class="slds-spinner slds-spinner_x-small slds-spinner_inline" aria-hidden="true">
                <path d="m20 50v6a24 24 0 1 1-8.4-18.2l1.4-5.6a30 30 0 1 0 7 17.8z"></path>
              </svg>
              {{ isEditMode ? 'Updating...' : 'Creating...' }}
            </span>
            <span *ngIf="!submitting">
              {{ isEditMode ? 'Update Task' : 'Create Task' }}
            </span>
          </button>
        </div>
      </div>
    </div>
  </div>
</div>
```

## 3. Alert Component (src/app/components/alert/alert.component.ts)

```typescript
import { Component, Input, OnInit } from '@angular/core';

@Component({
  selector: 'app-alert',
  template: `
    <div class="slds-notify_container slds-is-relative" *ngIf="message">
      <div [class]="getAlertClass()" role="alert">
        <span class="slds-assistive-text">{{ type }}</span>
        <span [class]="getIconContainerClass()">
          <svg class="slds-icon slds-icon_x-small" aria-hidden="true">
            <use [attr.xlink:href]="getIconPath()"></use>
          </svg>
        </span>
        <h2>
          <strong>{{ title }}</strong> {{ message }}
        </h2>
        <div class="slds-notify__close">
          <button class="slds-button slds-button_icon slds-button_icon-small" 
                  title="Close" 
                  (click)="close()">
            <svg class="slds-button__icon" aria-hidden="true">
              <use xlink:href="/assets/icons/utility-sprite/svg/symbols.svg#close"></use>
            </svg>
            <span class="slds-assistive-text">Close</span>
          </button>
        </div>
      </div>
    </div>
  `,
  styles: [`
    .slds-notify_container {
      margin-bottom: 1rem;
    }
  `]
})
export class AlertComponent implements OnInit {
  @Input() message = '';
  @Input() title = '';
  @Input() type: 'error' | 'warning' | 'info' | 'success' = 'info';
  @Input() autoClose = true;
  @Input() duration = 5000;

  ngOnInit(): void {
    if (this.autoClose && this.duration > 0) {
      setTimeout(() => {
        this.close();
      }, this.duration);
    }
  }

  getAlertClass(): string {
    const baseClass = 'slds-notify slds-notify_alert slds-alert';
    
    switch (this.type) {
      case 'error':
        return `${baseClass} slds-alert_error`;
      case 'warning':
        return `${baseClass} slds-alert_warning`;
      case 'success':
        return `${baseClass} slds-alert_success`;
      default:
        return `${baseClass} slds-alert_info`;
    }
  }

  getIconContainerClass(): string {
    const baseClass = 'slds-icon_container slds-m-right_x-small';
    
    switch (this.type) {
      case 'error':
        return `${baseClass} slds-icon-utility-error`;
      case 'warning':
        return `${baseClass} slds-icon-utility-warning`;
      case 'success':
        return `${baseClass} slds-icon-utility-success`;
      default:
        return `${baseClass} slds-icon-utility-info`;
    }
  }

  getIconPath(): string {
    switch (this.type) {
      case 'error':
        return '/assets/icons/utility-sprite/svg/symbols.svg#error';
      case 'warning':
        return '/assets/icons/utility-sprite/svg/symbols.svg#warning';
      case 'success':
        return '/assets/icons/utility-sprite/svg/symbols.svg#success';
      default:
        return '/assets/icons/utility-sprite/svg/symbols.svg#info';
    }
  }

  close(): void {
    this.message = '';
  }
}
```

## 4. Loading Component (src/app/components/loading/loading.component.ts)

```typescript
import { Component } from '@angular/core';

@Component({
  selector: 'app-loading',
  template: `
    <div class="slds-spinner_container">
      <div role="status" class="slds-spinner slds-spinner_medium">
        <span class="slds-assistive-text">Loading</span>
        <div class="slds-spinner__dot-a"></div>
        <div class="slds-spinner__dot-b"></div>
      </div>
    </div>
  `,
  styles: [`
    .slds-spinner_container {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }
  `]
})
export class LoadingComponent { }
```

## 5. Header Component (src/app/components/header/header.component.ts)

```typescript
import { Component } from '@angular/core';
import { Router } from '@angular/router';

@Component({
  selector: 'app-header',
  template: `
    <header class="slds-global-header_container">
      <div class="slds-global-header slds-grid slds-grid_align-spread">
        <div class="slds-global-header__item">
          <div class="slds-global-header__logo">
            <span class="slds-icon_container">
              <svg class="slds-icon slds-icon_large" aria-hidden="true">
                <use xlink:href="/assets/icons/standard-sprite/svg/symbols.svg#task"></use>
              </svg>
            </span>
            <span class="slds-text-heading_large slds-m-left_small">
              Todo List Application
            </span>
          </div>
        </div>
        <div class="slds-global-header__item slds-global-header__item_search">
          <!-- Search functionality can be added here -->
        </div>
        <div class="slds-global-header__item">
          <nav class="slds-context-bar">
            <div class="slds-context-bar__primary">
              <div class="slds-context-bar__item slds-context-bar__dropdown-trigger slds-dropdown-trigger slds-dropdown-trigger_click slds-no-hover">
                <a 
                  class="slds-context-bar__label-action" 
                  [routerLink]="['/tasks']"
                  routerLinkActive="slds-is-active">
                  <span class="slds-truncate">Tasks</span>
                </a>
              </div>
            </div>
          </nav>
        </div>
      </div>
    </header>
  `,
  styles: [`
    .slds-global-header {
      background-color: #16325c;
      color: white;
      padding: 0.75rem 1rem;
    }
    
    .slds-global-header__logo {
      display: flex;
      align-items: center;
      color: white;
    }
    
    .slds-context-bar__label-action {
      color: white;
      text-decoration: none;
      padding: 0.5rem 1rem;
      border-radius: 0.25rem;
      transition: background-color 0.2s;
    }
    
    .slds-context-bar__label-action:hover,
    .slds-context-bar__label-action.slds-is-active {
      background-color: rgba(255, 255, 255, 0.1);
    }
  `]
})
export class HeaderComponent {
  constructor(private router: Router) {}
}
```

## 6. Footer Component (src/app/components/footer/footer.component.ts)

```typescript
import { Component } from '@angular/core';

@Component({
  selector: 'app-footer',
  template: `
    <footer class="slds-global-footer">
      <div class="slds-grid slds-grid_align-spread slds-p-around_medium">
        <div class="slds-col">
          <p class="slds-text-body_small slds-text-color_weak">
            © 2025 Todo List Application. Built with MEAN Stack.
          </p>
        </div>
        <div class="slds-col slds-no-flex">
          <p class="slds-text-body_small slds-text-color_weak">
            Version 1.0.0
          </p>
        </div>
      </div>
    </footer>
  `,
  styles: [`
    .slds-global-footer {
      background-color: #f3f3f3;
      border-top: 1px solid #e5e5e5;
      margin-top: 2rem;
    }
  `]
})
export class FooterComponent { }
```