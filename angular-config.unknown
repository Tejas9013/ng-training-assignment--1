# Angular Frontend Package.json and Configuration

## 1. Frontend Package.json

```json
{
  "name": "ng-training-to-do-list-frontend",
  "version": "1.0.0",
  "description": "MEAN Stack To-Do List Application Frontend",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "build:prod": "ng build --configuration production",
    "test": "ng test",
    "test:coverage": "ng test --code-coverage",
    "lint": "ng lint",
    "e2e": "ng e2e",
    "analyze": "ng build --stats-json && npx webpack-bundle-analyzer dist/ng-training-to-do-list/stats.json"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^18.0.0",
    "@angular/common": "^18.0.0",
    "@angular/compiler": "^18.0.0",
    "@angular/core": "^18.0.0",
    "@angular/forms": "^18.0.0",
    "@angular/platform-browser": "^18.0.0",
    "@angular/platform-browser-dynamic": "^18.0.0",
    "@angular/router": "^18.0.0",
    "@salesforce-ux/design-system": "^2.22.0",
    "rxjs": "~7.8.0",
    "tslib": "^2.6.0",
    "zone.js": "~0.14.0"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^18.0.0",
    "@angular/cli": "^18.0.0",
    "@angular/compiler-cli": "^18.0.0",
    "@types/jasmine": "~5.1.0",
    "@types/node": "^20.12.0",
    "jasmine-core": "~5.1.0",
    "karma": "~6.4.0",
    "karma-chrome-headless": "~3.1.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.1.0",
    "typescript": "~5.4.0"
  }
}
```

## 2. Angular Configuration (angular.json)

```json
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "ng-training-to-do-list": {
      "projectType": "application",
      "schematics": {
        "@schematics/angular:component": {
          "style": "scss"
        }
      },
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:browser",
          "options": {
            "outputPath": "dist/ng-training-to-do-list",
            "index": "src/index.html",
            "main": "src/main.ts",
            "polyfills": "src/polyfills.ts",
            "tsConfig": "tsconfig.app.json",
            "inlineStyleLanguage": "scss",
            "assets": [
              "src/favicon.ico",
              "src/assets",
              {
                "glob": "**/*",
                "input": "./node_modules/@salesforce-ux/design-system/assets/fonts",
                "output": "/assets/fonts/"
              },
              {
                "glob": "**/*",
                "input": "./node_modules/@salesforce-ux/design-system/assets/icons",
                "output": "/assets/icons/"
              },
              {
                "glob": "**/*",
                "input": "./node_modules/@salesforce-ux/design-system/assets/images",
                "output": "/assets/images/"
              }
            ],
            "styles": [
              "node_modules/@salesforce-ux/design-system/assets/styles/salesforce-lightning-design-system.min.css",
              "src/styles.scss"
            ],
            "scripts": []
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kb",
                  "maximumError": "1mb"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "2kb",
                  "maximumError": "4kb"
                }
              ],
              "outputHashing": "all",
              "sourceMap": false,
              "namedChunks": false,
              "extractLicenses": true,
              "vendorChunk": false,
              "buildOptimizer": true,
              "optimization": true
            },
            "development": {
              "buildOptimizer": false,
              "optimization": false,
              "vendorChunk": true,
              "extractLicenses": false,
              "sourceMap": true,
              "namedChunks": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "production": {
              "buildTarget": "ng-training-to-do-list:build:production"
            },
            "development": {
              "buildTarget": "ng-training-to-do-list:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "polyfills": "src/polyfills.ts",
            "tsConfig": "tsconfig.spec.json",
            "inlineStyleLanguage": "scss",
            "assets": [
              "src/favicon.ico",
              "src/assets"
            ],
            "styles": [
              "node_modules/@salesforce-ux/design-system/assets/styles/salesforce-lightning-design-system.min.css",
              "src/styles.scss"
            ],
            "scripts": []
          }
        }
      }
    }
  }
}
```

## 3. TypeScript Configuration (tsconfig.json)

```json
{
  "compileOnSave": false,
  "compilerOptions": {
    "baseUrl": "./",
    "outDir": "./dist/out-tsc",
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "sourceMap": true,
    "declaration": false,
    "downlevelIteration": true,
    "experimentalDecorators": true,
    "moduleResolution": "node",
    "importHelpers": true,
    "target": "ES2022",
    "module": "ES2022",
    "useDefineForClassFields": false,
    "lib": [
      "ES2022",
      "dom"
    ],
    "paths": {
      "@app/*": ["src/app/*"],
      "@environments/*": ["src/environments/*"],
      "@assets/*": ["src/assets/*"]
    }
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true
  }
}
```

## 4. Environment Configuration

### environments/environment.ts
```typescript
export const environment = {
  production: false,
  apiUrl: 'http://localhost:3000/api',
  appName: 'Todo List Application',
  version: '1.0.0'
};
```

### environments/environment.prod.ts
```typescript
export const environment = {
  production: true,
  apiUrl: 'https://your-production-api.com/api',
  appName: 'Todo List Application',
  version: '1.0.0'
};
```

## 5. Task Interface (src/app/interfaces/task.interface.ts)

```typescript
export interface Task {
  _id?: string;
  title: string;
  description?: string;
  status: TaskStatus;
  priority: TaskPriority;
  dueDate?: Date;
  assignedTo?: string;
  comments?: string;
  createdAt?: Date;
  updatedAt?: Date;
  ageInDays?: number;
}

export type TaskStatus = 'pending' | 'completed';
export type TaskPriority = 'low' | 'normal' | 'high';

export interface TaskResponse {
  success: boolean;
  data: Task;
  message?: string;
}

export interface TasksResponse {
  success: boolean;
  data: {
    tasks: Task[];
    pagination: {
      currentPage: number;
      totalPages: number;
      totalTasks: number;
      hasNextPage: boolean;
      hasPrevPage: boolean;
    };
  };
  message?: string;
}

export interface TaskFilter {
  status?: TaskStatus;
  priority?: TaskPriority;
  search?: string;
  page?: number;
  limit?: number;
  sortBy?: string;
}

export interface TaskStats {
  totalTasks: number;
  statusBreakdown: Array<{ _id: TaskStatus; count: number }>;
  priorityBreakdown: Array<{ _id: TaskPriority; count: number }>;
}
```

## 6. Task Model (src/app/models/task.model.ts)

```typescript
import { Task, TaskStatus, TaskPriority } from '../interfaces/task.interface';

export class TaskModel implements Task {
  _id?: string;
  title: string;
  description?: string;
  status: TaskStatus;
  priority: TaskPriority;
  dueDate?: Date;
  assignedTo?: string;
  comments?: string;
  createdAt?: Date;
  updatedAt?: Date;
  ageInDays?: number;

  constructor(data: Partial<Task> = {}) {
    this._id = data._id;
    this.title = data.title || '';
    this.description = data.description || '';
    this.status = data.status || 'pending';
    this.priority = data.priority || 'normal';
    this.dueDate = data.dueDate ? new Date(data.dueDate) : undefined;
    this.assignedTo = data.assignedTo || '';
    this.comments = data.comments || '';
    this.createdAt = data.createdAt ? new Date(data.createdAt) : undefined;
    this.updatedAt = data.updatedAt ? new Date(data.updatedAt) : undefined;
    this.ageInDays = data.ageInDays;
  }

  static fromJSON(json: any): TaskModel {
    return new TaskModel(json);
  }

  toJSON(): Task {
    return {
      _id: this._id,
      title: this.title,
      description: this.description,
      status: this.status,
      priority: this.priority,
      dueDate: this.dueDate,
      assignedTo: this.assignedTo,
      comments: this.comments,
      createdAt: this.createdAt,
      updatedAt: this.updatedAt,
      ageInDays: this.ageInDays
    };
  }

  isOverdue(): boolean {
    return this.dueDate ? new Date(this.dueDate) < new Date() : false;
  }

  isPending(): boolean {
    return this.status === 'pending';
  }

  isCompleted(): boolean {
    return this.status === 'completed';
  }

  getPriorityClass(): string {
    switch (this.priority) {
      case 'high':
        return 'slds-badge_error';
      case 'normal':
        return 'slds-badge_warning';
      case 'low':
        return 'slds-badge_success';
      default:
        return 'slds-badge';
    }
  }

  getStatusClass(): string {
    switch (this.status) {
      case 'completed':
        return 'slds-badge_success';
      case 'pending':
        return 'slds-badge_warning';
      default:
        return 'slds-badge';
    }
  }
}
```

## 7. Main Styles (src/styles.scss)

```scss
/* Global Styles */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

/* SLDS Customizations */
.slds-scope {
  font-family: 'Inter', 'Salesforce Sans', Arial, sans-serif;
}

/* Custom Component Styles */
.task-card {
  background: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  transition: box-shadow 0.2s ease-in-out;

  &:hover {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  }
}

.task-form {
  background: white;
  border-radius: 8px;
  padding: 1.5rem;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.priority-high {
  border-left: 4px solid #ea001e;
}

.priority-normal {
  border-left: 4px solid #ffb75d;
}

.priority-low {
  border-left: 4px solid #00d4aa;
}

.status-completed {
  opacity: 0.7;
  text-decoration: line-through;
}

.overdue {
  background-color: #fef7f7;
  border-left: 4px solid #ea001e;
}

/* Responsive Utilities */
@media (max-width: 768px) {
  .slds-col {
    padding: 0.25rem;
  }
  
  .task-card {
    margin-bottom: 1rem;
  }
  
  .slds-button {
    width: 100%;
    margin-bottom: 0.5rem;
  }
}

/* Loading States */
.loading {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 200px;
}

.loading-spinner {
  width: 40px;
  height: 40px;
  border: 4px solid #f3f3f3;
  border-top: 4px solid #0176d3;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Error States */
.error-message {
  background-color: #fef7f7;
  border: 1px solid #ea001e;
  border-radius: 4px;
  padding: 1rem;
  color: #ea001e;
  margin: 1rem 0;
}

/* Success States */
.success-message {
  background-color: #f7fef7;
  border: 1px solid #00d4aa;
  border-radius: 4px;
  padding: 1rem;
  color: #027e70;
  margin: 1rem 0;
}

/* Form Validation */
.slds-has-error .slds-form-element__control {
  border-color: #ea001e;
}

.slds-form-element__help {
  color: #ea001e;
  font-size: 0.75rem;
  margin-top: 0.25rem;
}

/* Custom SLDS Overrides */
.slds-button_brand {
  background-color: #0176d3;
  border-color: #0176d3;
  
  &:hover {
    background-color: #014486;
    border-color: #014486;
  }
}

.slds-button_neutral {
  background-color: #f3f3f3;
  border-color: #c9c9c9;
  color: #181818;
  
  &:hover {
    background-color: #e5e5e5;
    border-color: #a8a8a8;
  }
}

/* Pagination */
.pagination-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem 0;
  border-top: 1px solid #e5e5e5;
  margin-top: 1rem;
}

.pagination-info {
  font-size: 0.875rem;
  color: #706e6b;
}

.pagination-controls {
  display: flex;
  gap: 0.5rem;
}

/* Table Responsive */
.table-container {
  overflow-x: auto;
  margin: 1rem 0;
}

.slds-table {
  min-width: 600px;
}

/* Task Statistics */
.stats-card {
  background: white;
  border-radius: 8px;
  padding: 1.5rem;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  text-align: center;
  
  .stats-number {
    font-size: 2rem;
    font-weight: 700;
    color: #0176d3;
  }
  
  .stats-label {
    font-size: 0.875rem;
    color: #706e6b;
    margin-top: 0.5rem;
  }
}
```